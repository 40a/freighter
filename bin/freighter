#!/usr/bin/env ruby

require 'optparse'
require 'bundler/setup'
require 'freighter'
require 'pry'

options = Freighter.options
logger  = Freighter.logger

if defined?(Rails)
  options.config_path = "#{Rails.root}/config/freighter.yml" 
else
  options.config_path = "./config/freighter.yml" 
end

OptionParser.new do |opts|
  opts.banner = "Usage: freigter [options] (deploy|configure)"

  opts.on('-e ENV', 'environment * required') do |env|
    options.environment = env
  end

  opts.on('-v', '--verbose', 'verbose logging') do |v|
    options.verbose = true
  end

  opts.on('-c', '--config PATH', 'path to yml config. Default is ./config/freighter.yml') do |opt|
    if opt
      options.config_path = opt
    elsif defiend?(Rails) && Rails.root
      options.config_path = "#{Rails.root}/config/freighter.yml"
    end
  end
end.parse!


# todo - brush up on nautical jargon to find a better way of saying the freighter is to depart
logger.info "All hand on deck. Toot toot."
logger.debug "app is chatty"

case ARGV[0]
when "deploy"
  logger.error "Must specify an environment with the -e option" unless options.environment
  Freighter::Deploy.new
when "configure"
  if File.exist?('./config/freighter.yml')
    logger.info "./config/freighter.yml already exists"
  else
    example_path = File.expand_path('../../config/freighter.example.yml', __FILE__)
    begin
      FileUtils.mkdir('config')
    rescue Errno::EEXIST
    end
    FileUtils.cp(example_path, 'config/freighter.yml')
    logger.info "Example configuration copied to ./config/freighter.yml"
    logger.info "Edit the file with your configuration."
    logger.info "Please remember to prefer to use ENV vars instead of passwords when editing the configuration."
  end
else
  logger.error "unexpected command given: #{ARGV[0]}. See usage. freighter --help"
end

